const dec:N=10
const dec:ch= 'a'
const dec:M=20
const dec:W=30
var dec : int arr[100]
function dec:  int get_next
parmeter: int x
2:factor x
2:term f1
1:expr t1
2:factor 1
2:term f1
1:expr + t1
return expr
procedure dec: proc
procedure declare : void proc
parmeter: int l
parmeter: int r
parmeter: int w
var dec : int i
2:factor l
2:term f1
1:expr t1
assignment i =  expr
while dec:
2:factor i
2:term f1
1:expr t1
2:factor r
2:term f1
1:expr t1
condition : exprA <= exprB
2:factor i
2:term f1
1:expr t1
2:factor w
2:term f1
1:expr t1
assignment arr[exprA] = exprB
while end:
return 
procedure dec: print_end
procedure declare : void print_end
printf "program ended" 
function dec: int fact
function dec:  int fact
parmeter: int n
if dec 
2:factor n
2:term f1
1:expr t1
2:factor 1
2:term f1
1:expr t1
condition : exprA <= exprB
2:factor 1
2:term f1
1:expr t1
return expr
if dec end
2:factor n
2:term f1
call fact
4:factor n
4:term f1
3:expr t1
4:factor 1
4:term f1
3:expr - t1
args_list : expr 1

arg list end 
2:factor __call fact
2:term * f2
1:expr t1
return expr
function dec: int mod
function dec:  int mod
parmeter: int a
parmeter: int b
2:factor a
2:term f1
1:expr t1
2:factor a
2:term f1
2:factor b
2:term / f2
2:factor b
2:term * f3
1:expr - t1
assignment a =  expr
2:factor a
2:term f1
1:expr t1
return expr
var dec : int a
var dec : int b
var dec : int c
var dec : int i
var dec : int _q
var dec : int _w1220
var dec : char ch
printf "start test\n" 
scanf a
if dec 
2:factor a
2:term f1
1:expr t1
2:factor 100
2:term f1
1:expr t1
condition : exprA < exprB
if dec 
2:factor a
2:term f1
1:expr t1
2:factor 0
2:term f1
1:expr t1
condition : exprA >= exprB
call proc
2:factor 0
2:term f1
1:expr t1
args_list : expr 1
2:factor a
2:term f1
1:expr t1
arg list expr 1
2:factor a
2:term f1
1:expr t1
2:factor 1
2:term f1
1:expr + t1
arg list expr 1

arg list end 
printf "arr[a]=" 
4:factor a
4:term f1
3:expr t1
2:factor arr[expr]
2:term f1
1:expr t1
printf expr
if dec end
if dec end
scanf b
scanf c
2:factor b
2:term f1
2:factor c
2:term * f2
1:expr t1
2:factor a
2:term f1
1:expr + t1
call _q
4:factor a
4:term f1
3:expr t1
4:factor 1
4:term f1
3:expr + t1
args_list : expr 1

arg list end 
2:factor __call get_next
2:term f1
2:factor 10
2:term / f2
1:expr - t1
assignment _q =  expr
call b
4:factor b
4:term f1
3:expr t1
args_list : expr 1
4:factor 3
4:term f1
3:expr t1
arg list expr 1

arg list end 
2:factor __call mod
2:term f1
1:expr t1
assignment b =  expr
2:factor b
2:term f1
1:expr t1
case 1
2:factor c
2:term f1
1:expr t1
2:factor 1
2:term f1
1:expr + t1
assignment c =  expr
case 2
2:factor c
2:term f1
1:expr t1
2:factor 2
2:term f1
1:expr + t1
assignment c =  expr
2:factor c
2:term f1
1:expr t1
2:factor 3
2:term f1
1:expr + t1
assignment c =  expr
call c
4:factor c
4:term f1
3:expr t1
args_list : expr 1

arg list end 
2:factor __call fact
2:term f1
1:expr t1
printf expr
call print_end
